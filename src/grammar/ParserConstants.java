/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package grammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int DOUBLE = 12;
  /** RegularExpression Id. */
  int FLOAT = 13;
  /** RegularExpression Id. */
  int CHAR = 14;
  /** RegularExpression Id. */
  int VOID = 15;
  /** RegularExpression Id. */
  int FOR = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int RETURN = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int MULTIPLY = 22;
  /** RegularExpression Id. */
  int DIVIDE = 23;
  /** RegularExpression Id. */
  int ASSIGN = 24;
  /** RegularExpression Id. */
  int GT = 25;
  /** RegularExpression Id. */
  int LT = 26;
  /** RegularExpression Id. */
  int EQUAL = 27;
  /** RegularExpression Id. */
  int NEQUAL = 28;
  /** RegularExpression Id. */
  int LOWEQU = 29;
  /** RegularExpression Id. */
  int GREATEQU = 30;
  /** RegularExpression Id. */
  int QUATION = 31;
  /** RegularExpression Id. */
  int SEMICOLON = 32;
  /** RegularExpression Id. */
  int LCURLY_BRACE = 33;
  /** RegularExpression Id. */
  int RCURLY_BRACE = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int COMMA = 37;
  /** RegularExpression Id. */
  int EXCLA_SYM = 38;
  /** RegularExpression Id. */
  int IDENTIFIER = 39;
  /** RegularExpression Id. */
  int LETTER = 40;
  /** RegularExpression Id. */
  int DIGIT = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"int\"",
    "\"double\"",
    "\"float\"",
    "\"char\"",
    "\"void\"",
    "\"for\"",
    "\"while\"",
    "\"return\"",
    "\"if\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"\\\"\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"%\"",
  };

}
