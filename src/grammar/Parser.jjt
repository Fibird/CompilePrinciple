/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Parser)package grammar;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Parser{  public static void main(String args []) throws ParseException, FileNotFoundException  {
    FileReader Fr = new FileReader("E:\\eclipse_workspace\\JavaCC\\src\\words.c");     new Parser(Fr);    try    {      SimpleNode n = Parser.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}
TOKEN : /* KEYS */
{
  < INT : "int" >
| < DOUBLE : "double" >
| < FLOAT : "float" >
| < CHAR : "char" >
| < VOID : "void" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
}

TOKEN : /* OPERATORS */
{
 < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN : /* RELATIONS */
{ 
< GT : ">" >
| < LT : "<" >
| < EQUAL : "==" >
| < NEQUAL : "!=" >
| < LOWEQU : "<=" >
| < GREATEQU : ">=" >
}

TOKEN : /* SEPARATER */
{
  < QUATION : "\"" >
| < SEMICOLON : ";" >
| < LCURLY_BRACE : "{" >
| < RCURLY_BRACE : "}" >
| < LBRACE : "(" >
| < RBRACE : ")" >
| < COMMA : "," >
| < EXCLA_SYM : "!" >
}
TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}

SimpleNode Start() :{}{  Program()  {    return jjtThis;  }}

void Program() :
{}
{	<INT>
	< IDENTIFIER >
	< LBRACE >
	< RBRACE>
	< LCURLY_BRACE>
	(
	  SentenceBlock()
	)*
	(	  ReturnSent()
	)?
	<RCURLY_BRACE>
}

void SentenceBlock() :
{}
{	Sentence()
	| < LCURLY_BRACE>
	( SentenceBlock() )*
	< RCURLY_BRACE>
}
void Sentence() :
{}
{
  SequenceSent()
  | ConditionSent()
  | LoopSent()}

void SequenceSent() :
{}
{
  //DeclareSent() // just for test
   [AssigmentSent()
  | DeclareSent()]
  < SEMICOLON>}
void ConditionSent() :
{}
{
  <IF>
   Condition()
   SentenceBlock()
}

void LoopSent() :
{}
{
  <WHILE>
  Condition()
   SentenceBlock()
}

void DeclareSent() :
{}
{
  	[
  	<INT>
   |<DOUBLE>
   | <FLOAT>
   | <CHAR>
   ]
   Identifier()
   (     <COMMA>
     Identifier()
   )*
}

void AssigmentSent() :
{}
{
  Identifier()
  <ASSIGN>
  Expression()
}

void Condition() :
{}
{
  "("
  Expression()
  Relations()
  Expression()
  ")"}
  void Expression() :{}{  AdditiveExpression()}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"    | "/"    | "%"    )    UnaryExpression()  )*}void UnaryExpression() :{}{  "(" Expression() ")"| Identifier()| Integer()}void Identifier() :{}{  < IDENTIFIER >}void Integer() :{}{  < INTEGER_LITERAL >}

void Relations() :
{}
{
  <GT> | <LT> | <EQUAL> | <LOWEQU> | <GREATEQU> | <NEQUAL>
}

void ReturnSent() :
{}
{
	< RETURN > <INTEGER_LITERAL> < SEMICOLON>
}