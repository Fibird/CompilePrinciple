/**
 * Author: Chaoyang Liu
 * E-main: chaoyanglius@outlook.com
 *
 * Software License Agreement (GPL License)
 * Practice of course "Principles of Compilers" using JavaCC
 * Copyright (c) 2017, Chaoyang Liu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ************************************************************************/options{  static = true;}PARSER_BEGIN(Parser)package grammar.genTree;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Parser
{
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    FileReader Fr = new FileReader("test/while.c"); 
    new Parser(Fr);
    try
    {
      SimpleNode n = Parser.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* KEYS */
{
  < INT : "int" >
| < DOUBLE : "double" >
| < FLOAT : "float" >
| < CHAR : "char" >
| < VOID : "void" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
}

TOKEN : /* OPERATORS */
{
 < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN : /* RELATIONS */
{ 
< GT : ">" >
| < LT : "<" >
| < EQUAL : "==" >
| < NEQUAL : "!=" >
| < LOWEQU : "<=" >
| < GREATEQU : ">=" >
}

TOKEN : /* SEPARATER */
{
  < QUATION : "\"" >
| < SEMICOLON : ";" >
| < LCURLY_BRACE : "{" >
| < RCURLY_BRACE : "}" >
| < LBRACE : "(" >
| < RBRACE : ")" >
| < COMMA : "," >
| < EXCLA_SYM : "!" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


SimpleNode Start() :
{}
{
  Program()
  {
    return jjtThis;
  }
}

void Program() :
{}
{
	<INT>
	< IDENTIFIER >
	< LBRACE >
	< RBRACE>
	< LCURLY_BRACE>
	(
	  SentenceBlock()
	)*
	(
	  ReturnSent()
	)?
	<RCURLY_BRACE>
}

void SentenceBlock() :
{}
{
	Sentence()
	| < LCURLY_BRACE>
	( SentenceBlock() )*
	< RCURLY_BRACE>
}

void Sentence() :
{}
{
  SequenceSent()
  | ConditionSent()
  | LoopSent()
}

void SequenceSent() :
{}
{
  //DeclareSent() // just for test
   [
      AssigmentSent()
    | DeclareSent()
   ]
  < SEMICOLON>
}

void ConditionSent() :
{}
{
  <IF>
   Condition()
   SentenceBlock()
}

void LoopSent() :
{}
{
  <WHILE>
  Condition()
   SentenceBlock()
}

void DeclareSent() :
{}
{
  [
  	 <INT>
   | <DOUBLE>
   | <FLOAT>
   | <CHAR>
  ]
   Identifier()
   (	< ASSIGN > Integer()
   )?
   (
     <COMMA>
     Identifier()
   (
	< ASSIGN > Integer()
   )?
   )*
}

void AssigmentSent() :
{}
{
  Identifier()
  <ASSIGN>
  Expression()
}

void Condition() :
{}
{
  "("
  Expression()
  Relations()
  Expression()
  ")"
}
  
void Expression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Integer() :
{}
{
  < INTEGER_LITERAL >
}

void Relations() :
{}
{
  <GT> | <LT> | <EQUAL> | <LOWEQU> | <GREATEQU> | <NEQUAL>
}

void ReturnSent() :
{}
{
	< RETURN > <INTEGER_LITERAL> < SEMICOLON>
}